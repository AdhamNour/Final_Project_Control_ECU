
Final_Project_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00002ab0  00002b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080016c  0080016c  00002c50  2**0
                  ALLOC
  3 .stab         00002f1c  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ee0  00000000  00000000  00005b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000a432  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000b900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000cc0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000cdec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000d0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_5>
      18:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 14 	call	0x295e	; 0x295e <main>
      8a:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_init>:
#define STOP_BITS_SETTING_BITS_SELECTION_START_BIT USBS

#define BIT_DATA_SETTING_BITS_SELECTION 0xFC
#define BIT_DATA_SETTING_BITS_SELECTION_START_BIT UCSZ0

void UART_init(const UART_ConfigType const *config) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <UART_init+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <UART_init+0x8>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     efa:	1a 82       	std	Y+2, r1	; 0x02
     efc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
     efe:	eb e2       	ldi	r30, 0x2B	; 43
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
     f06:	ea e2       	ldi	r30, 0x2A	; 42
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	88 e1       	ldi	r24, 0x18	; 24
     f0c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	DDRA = 0xFF;
     f0e:	ea e3       	ldi	r30, 0x3A	; 58
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	80 83       	st	Z, r24
	PORTA = (1 << URSEL) | ((config->bit_data) << UCSZ0)
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb 81       	ldd	r30, Y+3	; 0x03
     f1c:	fc 81       	ldd	r31, Y+4	; 0x04
     f1e:	80 81       	ld	r24, Z
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	28 2f       	mov	r18, r24
     f2a:	20 68       	ori	r18, 0x80	; 128
     f2c:	eb 81       	ldd	r30, Y+3	; 0x03
     f2e:	fc 81       	ldd	r31, Y+4	; 0x04
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	82 95       	swap	r24
     f38:	92 95       	swap	r25
     f3a:	90 7f       	andi	r25, 0xF0	; 240
     f3c:	98 27       	eor	r25, r24
     f3e:	80 7f       	andi	r24, 0xF0	; 240
     f40:	98 27       	eor	r25, r24
     f42:	28 2b       	or	r18, r24
     f44:	eb 81       	ldd	r30, Y+3	; 0x03
     f46:	fc 81       	ldd	r31, Y+4	; 0x04
     f48:	82 81       	ldd	r24, Z+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	82 2b       	or	r24, r18
     f5c:	8c 93       	st	X, r24
			| ((config->parity) << UPM0) | ((config->stop_bit) << USBS);
	UCSRC = (1 << URSEL) | ((config->bit_data) << UCSZ0)
     f5e:	a0 e4       	ldi	r26, 0x40	; 64
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	eb 81       	ldd	r30, Y+3	; 0x03
     f64:	fc 81       	ldd	r31, Y+4	; 0x04
     f66:	80 81       	ld	r24, Z
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	28 2f       	mov	r18, r24
     f72:	20 68       	ori	r18, 0x80	; 128
     f74:	eb 81       	ldd	r30, Y+3	; 0x03
     f76:	fc 81       	ldd	r31, Y+4	; 0x04
     f78:	81 81       	ldd	r24, Z+1	; 0x01
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	82 95       	swap	r24
     f80:	92 95       	swap	r25
     f82:	90 7f       	andi	r25, 0xF0	; 240
     f84:	98 27       	eor	r25, r24
     f86:	80 7f       	andi	r24, 0xF0	; 240
     f88:	98 27       	eor	r25, r24
     f8a:	28 2b       	or	r18, r24
     f8c:	eb 81       	ldd	r30, Y+3	; 0x03
     f8e:	fc 81       	ldd	r31, Y+4	; 0x04
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	82 2b       	or	r24, r18
     fa4:	8c 93       	st	X, r24
			| ((config->parity) << UPM0) | ((config->stop_bit) << USBS);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((config->baud_rate) * 8UL))) - 1);
     fa6:	eb 81       	ldd	r30, Y+3	; 0x03
     fa8:	fc 81       	ldd	r31, Y+4	; 0x04
     faa:	83 81       	ldd	r24, Z+3	; 0x03
     fac:	94 81       	ldd	r25, Z+4	; 0x04
     fae:	a5 81       	ldd	r26, Z+5	; 0x05
     fb0:	b6 81       	ldd	r27, Z+6	; 0x06
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	aa 1f       	adc	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	aa 1f       	adc	r26, r26
     fc0:	bb 1f       	adc	r27, r27
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	aa 1f       	adc	r26, r26
     fc8:	bb 1f       	adc	r27, r27
     fca:	9c 01       	movw	r18, r24
     fcc:	ad 01       	movw	r20, r26
     fce:	80 e4       	ldi	r24, 0x40	; 64
     fd0:	92 e4       	ldi	r25, 0x42	; 66
     fd2:	af e0       	ldi	r26, 0x0F	; 15
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 b8 14 	call	0x2970	; 0x2970 <__udivmodsi4>
     fde:	da 01       	movw	r26, r20
     fe0:	c9 01       	movw	r24, r18
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
     fe8:	e0 e4       	ldi	r30, 0x40	; 64
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	89 2f       	mov	r24, r25
     ff2:	99 27       	eor	r25, r25
     ff4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     ff6:	e9 e2       	ldi	r30, 0x29	; 41
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	80 83       	st	Z, r24

}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <UART_sendByte>:

void UART_sendByte(uint8 data) {
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    1018:	eb e2       	ldi	r30, 0x2B	; 43
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	80 72       	andi	r24, 0x20	; 32
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	b9 f3       	breq	.-18     	; 0x1018 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    102a:	ec e2       	ldi	r30, 0x2C	; 44
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	80 83       	st	Z, r24
}
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <Timer1_init>:
#define LED_PIN PD0 // define the pin for the LED

static void (*callBackPointer)(void);
static volatile uint8_t led_state = 0; // variable to store the LED state

void Timer1_init(const Timer1_ConfigType const *Config_Ptr) {
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <Timer1_init+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <Timer1_init+0x8>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <Timer1_init+0xa>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9a 83       	std	Y+2, r25	; 0x02
    104a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    104c:	ac e4       	ldi	r26, 0x4C	; 76
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e9 81       	ldd	r30, Y+1	; 0x01
    1052:	fa 81       	ldd	r31, Y+2	; 0x02
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	9c 93       	st	X, r25
    105c:	8e 93       	st	-X, r24
	switch (Config_Ptr->mode) {
    105e:	e9 81       	ldd	r30, Y+1	; 0x01
    1060:	fa 81       	ldd	r31, Y+2	; 0x02
    1062:	85 81       	ldd	r24, Z+5	; 0x05
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3e 83       	std	Y+6, r19	; 0x06
    106a:	2d 83       	std	Y+5, r18	; 0x05
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	91 05       	cpc	r25, r1
    1074:	49 f0       	breq	.+18     	; 0x1088 <Timer1_init+0x4e>
    1076:	2d 81       	ldd	r18, Y+5	; 0x05
    1078:	3e 81       	ldd	r19, Y+6	; 0x06
    107a:	2c 30       	cpi	r18, 0x0C	; 12
    107c:	31 05       	cpc	r19, r1
    107e:	21 f0       	breq	.+8      	; 0x1088 <Timer1_init+0x4e>
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	29 f4       	brne	.+10     	; 0x1092 <Timer1_init+0x58>
	case TIMER1_NORMAL:
	case TIMER1_CTC:
	case TIMER1_CTC_ICR1:
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    1088:	ef e4       	ldi	r30, 0x4F	; 79
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8c e0       	ldi	r24, 0x0C	; 12
    108e:	80 83       	st	Z, r24
    1090:	04 c0       	rjmp	.+8      	; 0x109a <Timer1_init+0x60>
		break;
	default:
		TCCR1A = ~((1 << FOC1A) | (1 << FOC1B));
    1092:	ef e4       	ldi	r30, 0x4F	; 79
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	83 ef       	ldi	r24, 0xF3	; 243
    1098:	80 83       	st	Z, r24

		break;
	}
	TCCR1A = (TCCR1A & 0xFC) | (Config_Ptr->mode & (~0xFC)); // set Timer1 mode
    109a:	af e4       	ldi	r26, 0x4F	; 79
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	98 2f       	mov	r25, r24
    10a6:	9c 7f       	andi	r25, 0xFC	; 252
    10a8:	e9 81       	ldd	r30, Y+1	; 0x01
    10aa:	fa 81       	ldd	r31, Y+2	; 0x02
    10ac:	85 81       	ldd	r24, Z+5	; 0x05
    10ae:	83 70       	andi	r24, 0x03	; 3
    10b0:	89 2b       	or	r24, r25
    10b2:	8c 93       	st	X, r24

	OCR1A = Config_Ptr->compare_value; // set Timer1 compare value A to 15624 for 1 second delay
    10b4:	aa e4       	ldi	r26, 0x4A	; 74
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	9c 93       	st	X, r25
    10c4:	8e 93       	st	-X, r24
	switch (Config_Ptr->mode) {
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	85 81       	ldd	r24, Z+5	; 0x05
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3c 83       	std	Y+4, r19	; 0x04
    10d2:	2b 83       	std	Y+3, r18	; 0x03
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	91 05       	cpc	r25, r1
    10dc:	89 f0       	breq	.+34     	; 0x1100 <Timer1_init+0xc6>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	2c 30       	cpi	r18, 0x0C	; 12
    10e4:	31 05       	cpc	r19, r1
    10e6:	a1 f0       	breq	.+40     	; 0x1110 <Timer1_init+0xd6>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	c1 f4       	brne	.+48     	; 0x1120 <Timer1_init+0xe6>
	case TIMER1_NORMAL:
		TIMSK |= (1 << TOIE1); // enable Timer1 compare match A interrupt
    10f0:	a9 e5       	ldi	r26, 0x59	; 89
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e9 e5       	ldi	r30, 0x59	; 89
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	84 60       	ori	r24, 0x04	; 4
    10fc:	8c 93       	st	X, r24
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <Timer1_init+0xee>
		break;
	case TIMER1_CTC:
		TIMSK |= (1 << OCIE1A); // enable Timer1 compare match A interrupt
    1100:	a9 e5       	ldi	r26, 0x59	; 89
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e9 e5       	ldi	r30, 0x59	; 89
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 61       	ori	r24, 0x10	; 16
    110c:	8c 93       	st	X, r24
    110e:	0c c0       	rjmp	.+24     	; 0x1128 <Timer1_init+0xee>
		break;
	case TIMER1_CTC_ICR1:
		TIMSK |= (1 << TICIE1);
    1110:	a9 e5       	ldi	r26, 0x59	; 89
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e9 e5       	ldi	r30, 0x59	; 89
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 62       	ori	r24, 0x20	; 32
    111c:	8c 93       	st	X, r24
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <Timer1_init+0xee>
		break;
	default:
		TIMSK = 0xC3;
    1120:	e9 e5       	ldi	r30, 0x59	; 89
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	83 ec       	ldi	r24, 0xC3	; 195
    1126:	80 83       	st	Z, r24

	}
	TCCR1B = ((((Config_Ptr->mode) & (~0xf3)) >> 2) << WGM12)
    1128:	ae e4       	ldi	r26, 0x4E	; 78
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e9 81       	ldd	r30, Y+1	; 0x01
    112e:	fa 81       	ldd	r31, Y+2	; 0x02
    1130:	85 81       	ldd	r24, Z+5	; 0x05
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	8c 70       	andi	r24, 0x0C	; 12
    1138:	95 95       	asr	r25
    113a:	87 95       	ror	r24
    113c:	95 95       	asr	r25
    113e:	87 95       	ror	r24
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	98 2f       	mov	r25, r24
    114e:	e9 81       	ldd	r30, Y+1	; 0x01
    1150:	fa 81       	ldd	r31, Y+2	; 0x02
    1152:	84 81       	ldd	r24, Z+4	; 0x04
    1154:	89 2b       	or	r24, r25
    1156:	8c 93       	st	X, r24
			| Config_Ptr->prescaler; // set Timer1 mode to CTC and prescaler to 1024
}
    1158:	26 96       	adiw	r28, 0x06	; 6
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <Timer1_setCallBack>:
void Timer1_setCallBack(void (*a_ptr)(void)) {
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <Timer1_setCallBack+0x6>
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
	callBackPointer = a_ptr;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	90 93 6e 01 	sts	0x016E, r25
    1180:	80 93 6d 01 	sts	0x016D, r24
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <Timer1_deInit>:
void Timer1_deInit(void) {
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0; // set Timer1 mode to normal
    1196:	ef e4       	ldi	r30, 0x4F	; 79
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	10 82       	st	Z, r1
	TCCR1B = 0; // set Timer1 mode to CTC and prescaler to 1024
    119c:	ee e4       	ldi	r30, 0x4E	; 78
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	10 82       	st	Z, r1
	OCR1A = 0; // set Timer1 compare value A to 15624 for 1 second delay
    11a2:	ea e4       	ldi	r30, 0x4A	; 74
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	11 82       	std	Z+1, r1	; 0x01
    11a8:	10 82       	st	Z, r1
	TIMSK |= 0xC3; // enable Timer1 compare match A interrupt
    11aa:	a9 e5       	ldi	r26, 0x59	; 89
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e9 e5       	ldi	r30, 0x59	; 89
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	83 6c       	ori	r24, 0xC3	; 195
    11b6:	8c 93       	st	X, r24
}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <__vector_6>:

ISR(TIMER1_COMPA_vect) // interrupt service routine for Timer1 compare match A
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
	callBackPointer();
    11e8:	e0 91 6d 01 	lds	r30, 0x016D
    11ec:	f0 91 6e 01 	lds	r31, 0x016E
    11f0:	09 95       	icall
}
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <__vector_8>:

ISR(TIMER1_OVF_vect) // interrupt service routine for Timer1 Over Flow
{
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	4f 93       	push	r20
    1228:	5f 93       	push	r21
    122a:	6f 93       	push	r22
    122c:	7f 93       	push	r23
    122e:	8f 93       	push	r24
    1230:	9f 93       	push	r25
    1232:	af 93       	push	r26
    1234:	bf 93       	push	r27
    1236:	ef 93       	push	r30
    1238:	ff 93       	push	r31
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	callBackPointer();
    1242:	e0 91 6d 01 	lds	r30, 0x016D
    1246:	f0 91 6e 01 	lds	r31, 0x016E
    124a:	09 95       	icall
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__vector_5>:
ISR(TIMER1_CAPT_vect) // interrupt service routine for Timer1 Over Flow
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	2f 93       	push	r18
    127e:	3f 93       	push	r19
    1280:	4f 93       	push	r20
    1282:	5f 93       	push	r21
    1284:	6f 93       	push	r22
    1286:	7f 93       	push	r23
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	af 93       	push	r26
    128e:	bf 93       	push	r27
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	callBackPointer();
    129c:	e0 91 6d 01 	lds	r30, 0x016D
    12a0:	f0 91 6e 01 	lds	r31, 0x016E
    12a4:	09 95       	icall
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <TWI_init>:
#include "../../common_macros.h"
#include <avr/io.h>


uint8 TWI_init(const TWI_ConfigType * const config)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	2b 97       	sbiw	r28, 0x0b	; 11
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	9a 87       	std	Y+10, r25	; 0x0a
    12e2:	89 87       	std	Y+9, r24	; 0x09
	sint8 TWPS_value=0,p1,p2,x;
    12e4:	18 86       	std	Y+8, r1	; 0x08
	float64 CPU_Ration;
	for(TWPS_value=0;TWPS_value<5;TWPS_value++){
    12e6:	18 86       	std	Y+8, r1	; 0x08
    12e8:	98 c0       	rjmp	.+304    	; 0x141a <TWI_init+0x14e>
		p1=(2<<TWPS_value)+1;
    12ea:	88 85       	ldd	r24, Y+8	; 0x08
    12ec:	28 2f       	mov	r18, r24
    12ee:	33 27       	eor	r19, r19
    12f0:	27 fd       	sbrc	r18, 7
    12f2:	30 95       	com	r19
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <TWI_init+0x32>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	2a 95       	dec	r18
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <TWI_init+0x2e>
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	8f 83       	std	Y+7, r24	; 0x07
		p2=4-p1;
    1306:	9f 81       	ldd	r25, Y+7	; 0x07
    1308:	84 e0       	ldi	r24, 0x04	; 4
    130a:	89 1b       	sub	r24, r25
    130c:	8e 83       	std	Y+6, r24	; 0x06
		CPU_Ration = (float64)F_CPU/((float64)(config->bit_rate)/1000.0);
    130e:	e9 85       	ldd	r30, Y+9	; 0x09
    1310:	fa 85       	ldd	r31, Y+10	; 0x0a
    1312:	81 81       	ldd	r24, Z+1	; 0x01
    1314:	92 81       	ldd	r25, Z+2	; 0x02
    1316:	a3 81       	ldd	r26, Z+3	; 0x03
    1318:	b4 81       	ldd	r27, Z+4	; 0x04
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a e7       	ldi	r20, 0x7A	; 122
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9c 01       	movw	r18, r24
    133c:	ad 01       	movw	r20, r26
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	74 e2       	ldi	r23, 0x24	; 36
    1342:	84 e7       	ldi	r24, 0x74	; 116
    1344:	99 e4       	ldi	r25, 0x49	; 73
    1346:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	ab 83       	std	Y+3, r26	; 0x03
    1354:	bc 83       	std	Y+4, r27	; 0x04
		CPU_Ration = CPU_Ration/(2<<p1);
    1356:	8f 81       	ldd	r24, Y+7	; 0x07
    1358:	28 2f       	mov	r18, r24
    135a:	33 27       	eor	r19, r19
    135c:	27 fd       	sbrc	r18, 7
    135e:	30 95       	com	r19
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <TWI_init+0x9e>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	2a 95       	dec	r18
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <TWI_init+0x9a>
    136e:	aa 27       	eor	r26, r26
    1370:	97 fd       	sbrc	r25, 7
    1372:	a0 95       	com	r26
    1374:	ba 2f       	mov	r27, r26
    1376:	bc 01       	movw	r22, r24
    1378:	cd 01       	movw	r24, r26
    137a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	69 81       	ldd	r22, Y+1	; 0x01
    1384:	7a 81       	ldd	r23, Y+2	; 0x02
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	ab 83       	std	Y+3, r26	; 0x03
    1398:	bc 83       	std	Y+4, r27	; 0x04
		x=CPU_Ration-(2<<p2) ;
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	28 2f       	mov	r18, r24
    139e:	33 27       	eor	r19, r19
    13a0:	27 fd       	sbrc	r18, 7
    13a2:	30 95       	com	r19
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <TWI_init+0xe2>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	2a 95       	dec	r18
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <TWI_init+0xde>
    13b2:	aa 27       	eor	r26, r26
    13b4:	97 fd       	sbrc	r25, 7
    13b6:	a0 95       	com	r26
    13b8:	ba 2f       	mov	r27, r26
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	69 81       	ldd	r22, Y+1	; 0x01
    13c8:	7a 81       	ldd	r23, Y+2	; 0x02
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8d 83       	std	Y+5, r24	; 0x05
		if(x>1){
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	ac f0       	brlt	.+42     	; 0x1414 <TWI_init+0x148>
			TWBR=x;
    13ea:	e0 e2       	ldi	r30, 0x20	; 32
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	80 83       	st	Z, r24
			TWSR=TWPS_value;
    13f2:	e1 e2       	ldi	r30, 0x21	; 33
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	88 85       	ldd	r24, Y+8	; 0x08
    13f8:	80 83       	st	Z, r24
		    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)*/
		    TWAR = config->address;
    13fa:	a2 e2       	ldi	r26, 0x22	; 34
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e9 85       	ldd	r30, Y+9	; 0x09
    1400:	fa 85       	ldd	r31, Y+10	; 0x0a
    1402:	80 81       	ld	r24, Z
    1404:	8c 93       	st	X, r24
		    TWCR = (1<<TWEN); /* enable TWI */
    1406:	e6 e5       	ldi	r30, 0x56	; 86
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	84 e0       	ldi	r24, 0x04	; 4
    140c:	80 83       	st	Z, r24

			return SUCCESS;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	8b 87       	std	Y+11, r24	; 0x0b
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <TWI_init+0x158>

uint8 TWI_init(const TWI_ConfigType * const config)
{
	sint8 TWPS_value=0,p1,p2,x;
	float64 CPU_Ration;
	for(TWPS_value=0;TWPS_value<5;TWPS_value++){
    1414:	88 85       	ldd	r24, Y+8	; 0x08
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	88 87       	std	Y+8, r24	; 0x08
    141a:	88 85       	ldd	r24, Y+8	; 0x08
    141c:	85 30       	cpi	r24, 0x05	; 5
    141e:	0c f4       	brge	.+2      	; 0x1422 <TWI_init+0x156>
    1420:	64 cf       	rjmp	.-312    	; 0x12ea <TWI_init+0x1e>

			return SUCCESS;
		}
	}

	return ERROR;
    1422:	1b 86       	std	Y+11, r1	; 0x0b
    1424:	8b 85       	ldd	r24, Y+11	; 0x0b

}
    1426:	2b 96       	adiw	r28, 0x0b	; 11
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <TWI_start>:

void TWI_start(void)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1440:	e6 e5       	ldi	r30, 0x56	; 86
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	84 ea       	ldi	r24, 0xA4	; 164
    1446:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1448:	e6 e5       	ldi	r30, 0x56	; 86
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	88 23       	and	r24, r24
    1450:	dc f7       	brge	.-10     	; 0x1448 <TWI_start+0x10>
}
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <TWI_stop>:

void TWI_stop(void)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1460:	e6 e5       	ldi	r30, 0x56	; 86
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	84 e9       	ldi	r24, 0x94	; 148
    1466:	80 83       	st	Z, r24
}
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    147a:	e3 e2       	ldi	r30, 0x23	; 35
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1482:	e6 e5       	ldi	r30, 0x56	; 86
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	84 e8       	ldi	r24, 0x84	; 132
    1488:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    148a:	e6 e5       	ldi	r30, 0x56	; 86
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	88 23       	and	r24, r24
    1492:	dc f7       	brge	.-10     	; 0x148a <TWI_writeByte+0x1c>
}
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    14a4:	e6 e5       	ldi	r30, 0x56	; 86
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	84 ec       	ldi	r24, 0xC4	; 196
    14aa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    14ac:	e6 e5       	ldi	r30, 0x56	; 86
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	88 23       	and	r24, r24
    14b4:	dc f7       	brge	.-10     	; 0x14ac <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    14b6:	e3 e2       	ldi	r30, 0x23	; 35
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
}
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    14ca:	e6 e5       	ldi	r30, 0x56	; 86
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	84 e8       	ldi	r24, 0x84	; 132
    14d0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    14d2:	e6 e5       	ldi	r30, 0x56	; 86
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	88 23       	and	r24, r24
    14da:	dc f7       	brge	.-10     	; 0x14d2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    14dc:	e3 e2       	ldi	r30, 0x23	; 35
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
}
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    14f2:	e1 e2       	ldi	r30, 0x21	; 33
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	88 7f       	andi	r24, 0xF8	; 248
    14fa:	89 83       	std	Y+1, r24	; 0x01
    return status;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <PWM_Timer0_Start>:
 *      Author: adham
 */

#include "PWM_Timer0.h"
#include "avr/io.h"
void PWM_Timer0_Start(uint8 duty_cycle) {
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Initilize the timer zero
	 */
	TCNT0 = 0; // Set Timer Initial Value to 0
    1516:	e2 e5       	ldi	r30, 0x52	; 82
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	10 82       	st	Z, r1

	OCR0 = (uint8)(((float32)duty_cycle/100)*255); //Set Compare value
    151c:	0c e5       	ldi	r16, 0x5C	; 92
    151e:	10 e0       	ldi	r17, 0x00	; 0
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	48 ec       	ldi	r20, 0xC8	; 200
    1540:	52 e4       	ldi	r21, 0x42	; 66
    1542:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	53 e4       	ldi	r21, 0x43	; 67
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	f8 01       	movw	r30, r16
    156c:	80 83       	st	Z, r24

	DDRB = DDRB | (1 << PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    156e:	a7 e3       	ldi	r26, 0x37	; 55
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e7 e3       	ldi	r30, 0x37	; 55
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 60       	ori	r24, 0x08	; 8
    157a:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
    157c:	e3 e5       	ldi	r30, 0x53	; 83
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8a e6       	ldi	r24, 0x6A	; 106
    1582:	80 83       	st	Z, r24
}
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <GPIO_setupPinDirection+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <GPIO_setupPinDirection+0x8>
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	6a 83       	std	Y+2, r22	; 0x02
    15a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	88 30       	cpi	r24, 0x08	; 8
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <GPIO_setupPinDirection+0x1c>
    15aa:	d5 c0       	rjmp	.+426    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <GPIO_setupPinDirection+0x24>
    15b2:	d1 c0       	rjmp	.+418    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3d 83       	std	Y+5, r19	; 0x05
    15bc:	2c 83       	std	Y+4, r18	; 0x04
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <GPIO_setupPinDirection+0x3a>
    15c8:	43 c0       	rjmp	.+134    	; 0x1650 <GPIO_setupPinDirection+0xc0>
    15ca:	2c 81       	ldd	r18, Y+4	; 0x04
    15cc:	3d 81       	ldd	r19, Y+5	; 0x05
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <GPIO_setupPinDirection+0x4e>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	71 f0       	breq	.+28     	; 0x15f8 <GPIO_setupPinDirection+0x68>
    15dc:	bc c0       	rjmp	.+376    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <GPIO_setupPinDirection+0x5a>
    15e8:	5f c0       	rjmp	.+190    	; 0x16a8 <GPIO_setupPinDirection+0x118>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <GPIO_setupPinDirection+0x66>
    15f4:	85 c0       	rjmp	.+266    	; 0x1700 <GPIO_setupPinDirection+0x170>
    15f6:	af c0       	rjmp	.+350    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	a1 f4       	brne	.+40     	; 0x1626 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    15fe:	aa e3       	ldi	r26, 0x3A	; 58
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	ea e3       	ldi	r30, 0x3A	; 58
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_setupPinDirection+0x8c>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_setupPinDirection+0x88>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	98 c0       	rjmp	.+304    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    1626:	aa e3       	ldi	r26, 0x3A	; 58
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	ea e3       	ldi	r30, 0x3A	; 58
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_setupPinDirection+0xb4>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_setupPinDirection+0xb0>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	83 c0       	rjmp	.+262    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	a1 f4       	brne	.+40     	; 0x167e <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    1656:	a7 e3       	ldi	r26, 0x37	; 55
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e7 e3       	ldi	r30, 0x37	; 55
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_setupPinDirection+0xe4>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_setupPinDirection+0xe0>
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	6c c0       	rjmp	.+216    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    167e:	a7 e3       	ldi	r26, 0x37	; 55
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e7 e3       	ldi	r30, 0x37	; 55
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <GPIO_setupPinDirection+0x10c>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <GPIO_setupPinDirection+0x108>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	57 c0       	rjmp	.+174    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	a1 f4       	brne	.+40     	; 0x16d6 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    16ae:	a4 e3       	ldi	r26, 0x34	; 52
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e4 e3       	ldi	r30, 0x34	; 52
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_setupPinDirection+0x13c>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_setupPinDirection+0x138>
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	40 c0       	rjmp	.+128    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    16d6:	a4 e3       	ldi	r26, 0x34	; 52
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e4 e3       	ldi	r30, 0x34	; 52
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <GPIO_setupPinDirection+0x164>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <GPIO_setupPinDirection+0x160>
    16f8:	80 95       	com	r24
    16fa:	84 23       	and	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	2b c0       	rjmp	.+86     	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	a1 f4       	brne	.+40     	; 0x172e <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    1706:	a1 e3       	ldi	r26, 0x31	; 49
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <GPIO_setupPinDirection+0x194>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <GPIO_setupPinDirection+0x190>
    1728:	84 2b       	or	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    172e:	a1 e3       	ldi	r26, 0x31	; 49
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e1 e3       	ldi	r30, 0x31	; 49
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <GPIO_setupPinDirection+0x1bc>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <GPIO_setupPinDirection+0x1b8>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_writePin+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_writePin+0x8>
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	6a 83       	std	Y+2, r22	; 0x02
    1778:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	88 30       	cpi	r24, 0x08	; 8
    177e:	08 f0       	brcs	.+2      	; 0x1782 <GPIO_writePin+0x1c>
    1780:	d5 c0       	rjmp	.+426    	; 0x192c <GPIO_writePin+0x1c6>
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	08 f0       	brcs	.+2      	; 0x178a <GPIO_writePin+0x24>
    1788:	d1 c0       	rjmp	.+418    	; 0x192c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* putting the port value as required */
		switch (port_num) {
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3d 83       	std	Y+5, r19	; 0x05
    1792:	2c 83       	std	Y+4, r18	; 0x04
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <GPIO_writePin+0x3a>
    179e:	43 c0       	rjmp	.+134    	; 0x1826 <GPIO_writePin+0xc0>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <GPIO_writePin+0x4e>
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	71 f0       	breq	.+28     	; 0x17ce <GPIO_writePin+0x68>
    17b2:	bc c0       	rjmp	.+376    	; 0x192c <GPIO_writePin+0x1c6>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <GPIO_writePin+0x5a>
    17be:	5f c0       	rjmp	.+190    	; 0x187e <GPIO_writePin+0x118>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <GPIO_writePin+0x66>
    17ca:	85 c0       	rjmp	.+266    	; 0x18d6 <GPIO_writePin+0x170>
    17cc:	af c0       	rjmp	.+350    	; 0x192c <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == 0)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	88 23       	and	r24, r24
    17d2:	a9 f4       	brne	.+42     	; 0x17fe <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA, pin_num);
    17d4:	ab e3       	ldi	r26, 0x3B	; 59
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	eb e3       	ldi	r30, 0x3B	; 59
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_writePin+0x8c>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_writePin+0x88>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	97 c0       	rjmp	.+302    	; 0x192c <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTA, pin_num);
    17fe:	ab e3       	ldi	r26, 0x3B	; 59
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	eb e3       	ldi	r30, 0x3B	; 59
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <GPIO_writePin+0xb6>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <GPIO_writePin+0xb2>
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	83 c0       	rjmp	.+262    	; 0x192c <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if (value == 0)
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	88 23       	and	r24, r24
    182a:	a9 f4       	brne	.+42     	; 0x1856 <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB, pin_num);
    182c:	a8 e3       	ldi	r26, 0x38	; 56
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e8 e3       	ldi	r30, 0x38	; 56
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <GPIO_writePin+0xe4>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <GPIO_writePin+0xe0>
    184e:	80 95       	com	r24
    1850:	84 23       	and	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	6b c0       	rjmp	.+214    	; 0x192c <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTB, pin_num);
    1856:	a8 e3       	ldi	r26, 0x38	; 56
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e8 e3       	ldi	r30, 0x38	; 56
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_writePin+0x10e>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_writePin+0x10a>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	57 c0       	rjmp	.+174    	; 0x192c <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if (value == 0)
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 23       	and	r24, r24
    1882:	a9 f4       	brne	.+42     	; 0x18ae <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC, pin_num);
    1884:	a5 e3       	ldi	r26, 0x35	; 53
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e3       	ldi	r30, 0x35	; 53
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <GPIO_writePin+0x13c>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <GPIO_writePin+0x138>
    18a6:	80 95       	com	r24
    18a8:	84 23       	and	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	3f c0       	rjmp	.+126    	; 0x192c <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTC, pin_num);
    18ae:	a5 e3       	ldi	r26, 0x35	; 53
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e5 e3       	ldi	r30, 0x35	; 53
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <GPIO_writePin+0x166>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <GPIO_writePin+0x162>
    18d0:	84 2b       	or	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	2b c0       	rjmp	.+86     	; 0x192c <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if (value == 0)
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 23       	and	r24, r24
    18da:	a9 f4       	brne	.+42     	; 0x1906 <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD, pin_num);
    18dc:	a2 e3       	ldi	r26, 0x32	; 50
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e2 e3       	ldi	r30, 0x32	; 50
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <GPIO_writePin+0x194>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <GPIO_writePin+0x190>
    18fe:	80 95       	com	r24
    1900:	84 23       	and	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	13 c0       	rjmp	.+38     	; 0x192c <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTD, pin_num);
    1906:	a2 e3       	ldi	r26, 0x32	; 50
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e2 e3       	ldi	r30, 0x32	; 50
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <GPIO_writePin+0x1be>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <GPIO_writePin+0x1ba>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
			break;
		}
	}

}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	2a 97       	sbiw	r28, 0x0a	; 10
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	88 30       	cpi	r24, 0x08	; 8
    1958:	18 f4       	brcc	.+6      	; 0x1960 <GPIO_readPin+0x24>
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	84 30       	cpi	r24, 0x04	; 4
    195e:	10 f0       	brcs	.+4      	; 0x1964 <GPIO_readPin+0x28>
		return LOGIC_LOW;
    1960:	19 86       	std	Y+9, r1	; 0x09
    1962:	8a c0       	rjmp	.+276    	; 0x1a78 <GPIO_readPin+0x13c>
	} else {
		/* getting the required pin value */
		switch (port_num) {
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	38 87       	std	Y+8, r19	; 0x08
    196c:	2f 83       	std	Y+7, r18	; 0x07
    196e:	4f 81       	ldd	r20, Y+7	; 0x07
    1970:	58 85       	ldd	r21, Y+8	; 0x08
    1972:	41 30       	cpi	r20, 0x01	; 1
    1974:	51 05       	cpc	r21, r1
    1976:	89 f1       	breq	.+98     	; 0x19da <GPIO_readPin+0x9e>
    1978:	8f 81       	ldd	r24, Y+7	; 0x07
    197a:	98 85       	ldd	r25, Y+8	; 0x08
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	91 05       	cpc	r25, r1
    1980:	34 f4       	brge	.+12     	; 0x198e <GPIO_readPin+0x52>
    1982:	2f 81       	ldd	r18, Y+7	; 0x07
    1984:	38 85       	ldd	r19, Y+8	; 0x08
    1986:	21 15       	cp	r18, r1
    1988:	31 05       	cpc	r19, r1
    198a:	69 f0       	breq	.+26     	; 0x19a6 <GPIO_readPin+0x6a>
    198c:	74 c0       	rjmp	.+232    	; 0x1a76 <GPIO_readPin+0x13a>
    198e:	4f 81       	ldd	r20, Y+7	; 0x07
    1990:	58 85       	ldd	r21, Y+8	; 0x08
    1992:	42 30       	cpi	r20, 0x02	; 2
    1994:	51 05       	cpc	r21, r1
    1996:	d9 f1       	breq	.+118    	; 0x1a0e <GPIO_readPin+0xd2>
    1998:	8f 81       	ldd	r24, Y+7	; 0x07
    199a:	98 85       	ldd	r25, Y+8	; 0x08
    199c:	83 30       	cpi	r24, 0x03	; 3
    199e:	91 05       	cpc	r25, r1
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <GPIO_readPin+0x68>
    19a2:	4f c0       	rjmp	.+158    	; 0x1a42 <GPIO_readPin+0x106>
    19a4:	68 c0       	rjmp	.+208    	; 0x1a76 <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    19a6:	e9 e3       	ldi	r30, 0x39	; 57
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a9 01       	movw	r20, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <GPIO_readPin+0x82>
    19ba:	55 95       	asr	r21
    19bc:	47 95       	ror	r20
    19be:	8a 95       	dec	r24
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <GPIO_readPin+0x7e>
    19c2:	ca 01       	movw	r24, r20
    19c4:	81 70       	andi	r24, 0x01	; 1
    19c6:	90 70       	andi	r25, 0x00	; 0
    19c8:	88 23       	and	r24, r24
    19ca:	19 f0       	breq	.+6      	; 0x19d2 <GPIO_readPin+0x96>
    19cc:	51 e0       	ldi	r21, 0x01	; 1
    19ce:	5e 83       	std	Y+6, r21	; 0x06
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <GPIO_readPin+0x98>
    19d2:	1e 82       	std	Y+6, r1	; 0x06
    19d4:	8e 81       	ldd	r24, Y+6	; 0x06
    19d6:	89 87       	std	Y+9, r24	; 0x09
    19d8:	4f c0       	rjmp	.+158    	; 0x1a78 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    19da:	e6 e3       	ldi	r30, 0x36	; 54
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_readPin+0xb6>
    19ee:	55 95       	asr	r21
    19f0:	47 95       	ror	r20
    19f2:	8a 95       	dec	r24
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_readPin+0xb2>
    19f6:	ca 01       	movw	r24, r20
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	90 70       	andi	r25, 0x00	; 0
    19fc:	88 23       	and	r24, r24
    19fe:	19 f0       	breq	.+6      	; 0x1a06 <GPIO_readPin+0xca>
    1a00:	51 e0       	ldi	r21, 0x01	; 1
    1a02:	5d 83       	std	Y+5, r21	; 0x05
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <GPIO_readPin+0xcc>
    1a06:	1d 82       	std	Y+5, r1	; 0x05
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	89 87       	std	Y+9, r24	; 0x09
    1a0c:	35 c0       	rjmp	.+106    	; 0x1a78 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    1a0e:	e3 e3       	ldi	r30, 0x33	; 51
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a9 01       	movw	r20, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <GPIO_readPin+0xea>
    1a22:	55 95       	asr	r21
    1a24:	47 95       	ror	r20
    1a26:	8a 95       	dec	r24
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <GPIO_readPin+0xe6>
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	81 70       	andi	r24, 0x01	; 1
    1a2e:	90 70       	andi	r25, 0x00	; 0
    1a30:	88 23       	and	r24, r24
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <GPIO_readPin+0xfe>
    1a34:	51 e0       	ldi	r21, 0x01	; 1
    1a36:	5c 83       	std	Y+4, r21	; 0x04
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <GPIO_readPin+0x100>
    1a3a:	1c 82       	std	Y+4, r1	; 0x04
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	89 87       	std	Y+9, r24	; 0x09
    1a40:	1b c0       	rjmp	.+54     	; 0x1a78 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    1a42:	e0 e3       	ldi	r30, 0x30	; 48
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a9 01       	movw	r20, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <GPIO_readPin+0x11e>
    1a56:	55 95       	asr	r21
    1a58:	47 95       	ror	r20
    1a5a:	8a 95       	dec	r24
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <GPIO_readPin+0x11a>
    1a5e:	ca 01       	movw	r24, r20
    1a60:	81 70       	andi	r24, 0x01	; 1
    1a62:	90 70       	andi	r25, 0x00	; 0
    1a64:	88 23       	and	r24, r24
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <GPIO_readPin+0x132>
    1a68:	51 e0       	ldi	r21, 0x01	; 1
    1a6a:	5b 83       	std	Y+3, r21	; 0x03
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <GPIO_readPin+0x134>
    1a6e:	1b 82       	std	Y+3, r1	; 0x03
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	89 87       	std	Y+9, r24	; 0x09
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <GPIO_readPin+0x13c>
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <GPIO_readPin+0x140>
			break;
		}
	}
}
    1a78:	99 85       	ldd	r25, Y+9	; 0x09
    1a7a:	9a 87       	std	Y+10, r25	; 0x0a
    1a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7e:	2a 96       	adiw	r28, 0x0a	; 10
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <GPIO_setupPortDirection+0x6>
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <GPIO_setupPortDirection+0x8>
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	90 f5       	brcc	.+100    	; 0x1b0a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	3c 83       	std	Y+4, r19	; 0x04
    1aae:	2b 83       	std	Y+3, r18	; 0x03
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	d1 f0       	breq	.+52     	; 0x1aee <GPIO_setupPortDirection+0x5e>
    1aba:	2b 81       	ldd	r18, Y+3	; 0x03
    1abc:	3c 81       	ldd	r19, Y+4	; 0x04
    1abe:	22 30       	cpi	r18, 0x02	; 2
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	2c f4       	brge	.+10     	; 0x1ace <GPIO_setupPortDirection+0x3e>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	61 f0       	breq	.+24     	; 0x1ae4 <GPIO_setupPortDirection+0x54>
    1acc:	1e c0       	rjmp	.+60     	; 0x1b0a <GPIO_setupPortDirection+0x7a>
    1ace:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad2:	22 30       	cpi	r18, 0x02	; 2
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	81 f0       	breq	.+32     	; 0x1af8 <GPIO_setupPortDirection+0x68>
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	83 30       	cpi	r24, 0x03	; 3
    1ade:	91 05       	cpc	r25, r1
    1ae0:	81 f0       	breq	.+32     	; 0x1b02 <GPIO_setupPortDirection+0x72>
    1ae2:	13 c0       	rjmp	.+38     	; 0x1b0a <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1ae4:	ea e3       	ldi	r30, 0x3A	; 58
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	80 83       	st	Z, r24
    1aec:	0e c0       	rjmp	.+28     	; 0x1b0a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1aee:	e7 e3       	ldi	r30, 0x37	; 55
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	80 83       	st	Z, r24
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1af8:	e4 e3       	ldi	r30, 0x34	; 52
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	80 83       	st	Z, r24
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b02:	e1 e3       	ldi	r30, 0x31	; 49
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <GPIO_writePort+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <GPIO_writePort+0x8>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	90 f5       	brcc	.+100    	; 0x1b92 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the required port as required */
		switch (port_num) {
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	3c 83       	std	Y+4, r19	; 0x04
    1b36:	2b 83       	std	Y+3, r18	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	d1 f0       	breq	.+52     	; 0x1b76 <GPIO_writePort+0x5e>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <GPIO_writePort+0x3e>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <GPIO_writePort+0x54>
    1b54:	1e c0       	rjmp	.+60     	; 0x1b92 <GPIO_writePort+0x7a>
    1b56:	2b 81       	ldd	r18, Y+3	; 0x03
    1b58:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <GPIO_writePort+0x68>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	91 05       	cpc	r25, r1
    1b68:	81 f0       	breq	.+32     	; 0x1b8a <GPIO_writePort+0x72>
    1b6a:	13 c0       	rjmp	.+38     	; 0x1b92 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1b6c:	eb e3       	ldi	r30, 0x3B	; 59
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	80 83       	st	Z, r24
    1b74:	0e c0       	rjmp	.+28     	; 0x1b92 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b76:	e8 e3       	ldi	r30, 0x38	; 56
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	80 83       	st	Z, r24
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b80:	e5 e3       	ldi	r30, 0x35	; 53
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	80 83       	st	Z, r24
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b8a:	e2 e3       	ldi	r30, 0x32	; 50
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <GPIO_readPort+0x6>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <GPIO_readPort+0x8>
    1ba8:	0f 92       	push	r0
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	84 30       	cpi	r24, 0x04	; 4
    1bb4:	10 f0       	brcs	.+4      	; 0x1bba <GPIO_readPort+0x1a>
		return 0; // if the port does not exist
    1bb6:	1c 82       	std	Y+4, r1	; 0x04
    1bb8:	34 c0       	rjmp	.+104    	; 0x1c22 <GPIO_readPort+0x82>
	} else {
		/* Get the required pin */
		switch (port_num) {
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	3b 83       	std	Y+3, r19	; 0x03
    1bc2:	2a 83       	std	Y+2, r18	; 0x02
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	91 05       	cpc	r25, r1
    1bcc:	d1 f0       	breq	.+52     	; 0x1c02 <GPIO_readPort+0x62>
    1bce:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd0:	3b 81       	ldd	r19, Y+3	; 0x03
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <GPIO_readPort+0x42>
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <GPIO_readPort+0x58>
    1be0:	1f c0       	rjmp	.+62     	; 0x1c20 <GPIO_readPort+0x80>
    1be2:	2a 81       	ldd	r18, Y+2	; 0x02
    1be4:	3b 81       	ldd	r19, Y+3	; 0x03
    1be6:	22 30       	cpi	r18, 0x02	; 2
    1be8:	31 05       	cpc	r19, r1
    1bea:	81 f0       	breq	.+32     	; 0x1c0c <GPIO_readPort+0x6c>
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	81 f0       	breq	.+32     	; 0x1c16 <GPIO_readPort+0x76>
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <GPIO_readPort+0x80>
		case PORTA_ID:
			return PINA;
    1bf8:	e9 e3       	ldi	r30, 0x39	; 57
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	90 81       	ld	r25, Z
    1bfe:	9c 83       	std	Y+4, r25	; 0x04
    1c00:	10 c0       	rjmp	.+32     	; 0x1c22 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return PINB;
    1c02:	e6 e3       	ldi	r30, 0x36	; 54
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	20 81       	ld	r18, Z
    1c08:	2c 83       	std	Y+4, r18	; 0x04
    1c0a:	0b c0       	rjmp	.+22     	; 0x1c22 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return PINC;
    1c0c:	e3 e3       	ldi	r30, 0x33	; 51
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	30 81       	ld	r19, Z
    1c12:	3c 83       	std	Y+4, r19	; 0x04
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return PIND;
    1c16:	e0 e3       	ldi	r30, 0x30	; 48
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8c 83       	std	Y+4, r24	; 0x04
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <GPIO_readPort+0x82>
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <GPIO_readPort+0x86>
			break;
		}
	}
}
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	9d 83       	std	Y+5, r25	; 0x05
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <GPIO_togglePin>:


uint8 GPIO_togglePin(uint8 port_num, uint8 pin_num){
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <GPIO_togglePin+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <GPIO_togglePin+0x8>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <GPIO_togglePin+0xa>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	6a 83       	std	Y+2, r22	; 0x02
	/*
		 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
		 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
		 * In this case the input is not valid port/pin number
		 */
		if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	88 30       	cpi	r24, 0x08	; 8
    1c4e:	08 f0       	brcs	.+2      	; 0x1c52 <GPIO_togglePin+0x1a>
    1c50:	7b c0       	rjmp	.+246    	; 0x1d48 <GPIO_togglePin+0x110>
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	84 30       	cpi	r24, 0x04	; 4
    1c56:	08 f0       	brcs	.+2      	; 0x1c5a <GPIO_togglePin+0x22>
    1c58:	77 c0       	rjmp	.+238    	; 0x1d48 <GPIO_togglePin+0x110>
			/*Do nothing*/
		} else {
			/* getting the required pin value */
			switch (port_num) {
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	3d 83       	std	Y+5, r19	; 0x05
    1c62:	2c 83       	std	Y+4, r18	; 0x04
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	61 f1       	breq	.+88     	; 0x1cc6 <GPIO_togglePin+0x8e>
    1c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c70:	3d 81       	ldd	r19, Y+5	; 0x05
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <GPIO_togglePin+0x4a>
    1c78:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	69 f0       	breq	.+26     	; 0x1c9a <GPIO_togglePin+0x62>
    1c80:	63 c0       	rjmp	.+198    	; 0x1d48 <GPIO_togglePin+0x110>
    1c82:	2c 81       	ldd	r18, Y+4	; 0x04
    1c84:	3d 81       	ldd	r19, Y+5	; 0x05
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	91 f1       	breq	.+100    	; 0x1cf0 <GPIO_togglePin+0xb8>
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c90:	83 30       	cpi	r24, 0x03	; 3
    1c92:	91 05       	cpc	r25, r1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <GPIO_togglePin+0x60>
    1c96:	42 c0       	rjmp	.+132    	; 0x1d1c <GPIO_togglePin+0xe4>
    1c98:	57 c0       	rjmp	.+174    	; 0x1d48 <GPIO_togglePin+0x110>
			case PORTA_ID:
				return TOGGLE_BIT(PORTA,pin_num);
    1c9a:	ab e3       	ldi	r26, 0x3B	; 59
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 2e       	mov	r0, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <GPIO_togglePin+0x80>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	0a 94       	dec	r0
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <GPIO_togglePin+0x7c>
    1cbc:	84 27       	eor	r24, r20
    1cbe:	8c 93       	st	X, r24
    1cc0:	9c 91       	ld	r25, X
    1cc2:	9b 83       	std	Y+3, r25	; 0x03
    1cc4:	42 c0       	rjmp	.+132    	; 0x1d4a <GPIO_togglePin+0x112>
				break;
			case PORTB_ID:
				return TOGGLE_BIT(PORTB,pin_num);
    1cc6:	a8 e3       	ldi	r26, 0x38	; 56
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e8 e3       	ldi	r30, 0x38	; 56
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <GPIO_togglePin+0xaa>
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	2a 95       	dec	r18
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <GPIO_togglePin+0xa6>
    1ce6:	84 27       	eor	r24, r20
    1ce8:	8c 93       	st	X, r24
    1cea:	2c 91       	ld	r18, X
    1cec:	2b 83       	std	Y+3, r18	; 0x03
    1cee:	2d c0       	rjmp	.+90     	; 0x1d4a <GPIO_togglePin+0x112>
				break;
			case PORTC_ID:
				return TOGGLE_BIT(PORTC,pin_num);
    1cf0:	a5 e3       	ldi	r26, 0x35	; 53
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e5 e3       	ldi	r30, 0x35	; 53
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <GPIO_togglePin+0xd6>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <GPIO_togglePin+0xd2>
    1d12:	84 27       	eor	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	3c 91       	ld	r19, X
    1d18:	3b 83       	std	Y+3, r19	; 0x03
    1d1a:	17 c0       	rjmp	.+46     	; 0x1d4a <GPIO_togglePin+0x112>
				break;
			case PORTD_ID:
				return TOGGLE_BIT(PORTD,pin_num);
    1d1c:	a2 e3       	ldi	r26, 0x32	; 50
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e2 e3       	ldi	r30, 0x32	; 50
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	48 2f       	mov	r20, r24
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 2e       	mov	r0, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <GPIO_togglePin+0x102>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <GPIO_togglePin+0xfe>
    1d3e:	84 27       	eor	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	8c 91       	ld	r24, X
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <GPIO_togglePin+0x112>
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_togglePin+0x116>
				break;
			}
		}
}
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d50:	26 96       	adiw	r28, 0x06	; 6
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <ADC_init>:
#include "avr/io.h"
#include "../../common_macros.h"
/*
 * Description: Initing the ADC Module
 * */
void ADC_init (const ADC_ConfigType const* config_ptr){
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <ADC_init+0x6>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01


	ADMUX = (config_ptr->ref_volts)<<6;
    1d70:	a7 e2       	ldi	r26, 0x27	; 39
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	80 81       	ld	r24, Z
    1d7a:	82 95       	swap	r24
    1d7c:	88 0f       	add	r24, r24
    1d7e:	88 0f       	add	r24, r24
    1d80:	80 7c       	andi	r24, 0xC0	; 192
    1d82:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,ADLAR);
    1d84:	a7 e2       	ldi	r26, 0x27	; 39
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e7 e2       	ldi	r30, 0x27	; 39
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 7d       	andi	r24, 0xDF	; 223
    1d90:	8c 93       	st	X, r24
	ADMUX &= 0xE0; /*selecting the channel zero as default*/
    1d92:	a7 e2       	ldi	r26, 0x27	; 39
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e7 e2       	ldi	r30, 0x27	; 39
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 7e       	andi	r24, 0xE0	; 224
    1d9e:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
    1da0:	a6 e2       	ldi	r26, 0x26	; 38
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e6 e2       	ldi	r30, 0x26	; 38
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	80 68       	ori	r24, 0x80	; 128
    1dac:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADIE);
    1dae:	a6 e2       	ldi	r26, 0x26	; 38
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e6 e2       	ldi	r30, 0x26	; 38
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	87 7f       	andi	r24, 0xF7	; 247
    1dba:	8c 93       	st	X, r24

	ADCSRA=(ADCSRA&0xF8)|((config_ptr->prescaler)|(0x07));
    1dbc:	a6 e2       	ldi	r26, 0x26	; 38
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e6 e2       	ldi	r30, 0x26	; 38
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	98 7f       	andi	r25, 0xF8	; 248
    1dca:	e9 81       	ldd	r30, Y+1	; 0x01
    1dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dce:	81 81       	ldd	r24, Z+1	; 0x01
    1dd0:	87 60       	ori	r24, 0x07	; 7
    1dd2:	89 2b       	or	r24, r25
    1dd4:	8c 93       	st	X, r24

}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <ADC_readChannel>:
/*
 * Description: reading the required channel from the ADC
 * */
uint16 ADC_readChannel(ADC_Channel channel){
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0xF8)|((channel)&(0x07));
    1dec:	a7 e2       	ldi	r26, 0x27	; 39
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e7 e2       	ldi	r30, 0x27	; 39
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	98 2f       	mov	r25, r24
    1df8:	98 7f       	andi	r25, 0xF8	; 248
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	87 70       	andi	r24, 0x07	; 7
    1dfe:	89 2b       	or	r24, r25
    1e00:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);
    1e02:	a6 e2       	ldi	r26, 0x26	; 38
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e6 e2       	ldi	r30, 0x26	; 38
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 64       	ori	r24, 0x40	; 64
    1e0e:	8c 93       	st	X, r24

	while(!(GET_BIT(ADCSRA,ADIF)));
    1e10:	e6 e2       	ldi	r30, 0x26	; 38
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	80 71       	andi	r24, 0x10	; 16
    1e1c:	90 70       	andi	r25, 0x00	; 0
    1e1e:	95 95       	asr	r25
    1e20:	87 95       	ror	r24
    1e22:	95 95       	asr	r25
    1e24:	87 95       	ror	r24
    1e26:	95 95       	asr	r25
    1e28:	87 95       	ror	r24
    1e2a:	95 95       	asr	r25
    1e2c:	87 95       	ror	r24
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	79 f3       	breq	.-34     	; 0x1e10 <ADC_readChannel+0x30>

	SET_BIT(ADCSRA,ADIF);
    1e32:	a6 e2       	ldi	r26, 0x26	; 38
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e6 e2       	ldi	r30, 0x26	; 38
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 61       	ori	r24, 0x10	; 16
    1e3e:	8c 93       	st	X, r24

	return ADC;
    1e40:	e4 e2       	ldi	r30, 0x24	; 36
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	91 81       	ldd	r25, Z+1	; 0x01

}
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <LM35_init>:
#define ADC_MAX_VOLTAGE 2.56
static ADC_ConfigType ADC_configType;
static 	float64 factor = ((float64)MAX_TEMPERATURE*ADC_MAX_VOLTAGE)/((float64)MAX_VOLTAGE*ADC_MAX_READING);


void LM35_init() {
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62

	ADC_configType.prescaler = ADC_DIVISION_FACTOR_8;
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	80 93 70 01 	sts	0x0170, r24
	ADC_configType.ref_volts = ADC_2_56V;
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	80 93 6f 01 	sts	0x016F, r24

	ADC_init(&ADC_configType);
    1e64:	8f e6       	ldi	r24, 0x6F	; 111
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <ADC_init>
}
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <LM35_readTemp>:

uint16 LM35_readTemp() {
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <LM35_readTemp+0x6>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
	uint16 channelReading= ADC_readChannel(LM35_CHANNEL);
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <ADC_readChannel>
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
	return (uint16)((uint32)(factor * channelReading));
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	cc 01       	movw	r24, r24
    1e8c:	a0 e0       	ldi	r26, 0x00	; 0
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	20 91 68 01 	lds	r18, 0x0168
    1ea0:	30 91 69 01 	lds	r19, 0x0169
    1ea4:	40 91 6a 01 	lds	r20, 0x016A
    1ea8:	50 91 6b 01 	lds	r21, 0x016B
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void) {
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1ee2:	83 e0       	ldi	r24, 0x03	; 3
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, PIN_OUTPUT);
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	62 e0       	ldi	r22, 0x02	; 2
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 ea       	ldi	r26, 0xA0	; 160
    1efc:	b1 e4       	ldi	r27, 0x41	; 65
    1efe:	8b 87       	std	Y+11, r24	; 0x0b
    1f00:	9c 87       	std	Y+12, r25	; 0x0c
    1f02:	ad 87       	std	Y+13, r26	; 0x0d
    1f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a e7       	ldi	r20, 0x7A	; 122
    1f14:	53 e4       	ldi	r21, 0x43	; 67
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	8f 83       	std	Y+7, r24	; 0x07
    1f20:	98 87       	std	Y+8, r25	; 0x08
    1f22:	a9 87       	std	Y+9, r26	; 0x09
    1f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f26:	6f 81       	ldd	r22, Y+7	; 0x07
    1f28:	78 85       	ldd	r23, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <LCD_init+0x7a>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	4c f5       	brge	.+82     	; 0x1fb2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e2       	ldi	r20, 0x20	; 32
    1f6e:	51 e4       	ldi	r21, 0x41	; 65
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <LCD_init+0xda>
    1f8a:	89 e1       	ldi	r24, 0x19	; 25
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_init+0xc8>
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <LCD_init+0xbc>
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_init+0x104>
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	6f ef       	ldi	r22, 0xFF	; 255
    1fde:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1fe2:	88 e3       	ldi	r24, 0x38	; 56
    1fe4:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1fe8:	8c e0       	ldi	r24, 0x0C	; 12
    1fea:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_sendCommand>
}
    1ff4:	2e 96       	adiw	r28, 0x0e	; 14
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	6d 97       	sbiw	r28, 0x1d	; 29
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e8       	ldi	r26, 0x80	; 128
    202c:	bf e3       	ldi	r27, 0x3F	; 63
    202e:	89 8f       	std	Y+25, r24	; 0x19
    2030:	9a 8f       	std	Y+26, r25	; 0x1a
    2032:	ab 8f       	std	Y+27, r26	; 0x1b
    2034:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	69 8d       	ldd	r22, Y+25	; 0x19
    2038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a e7       	ldi	r20, 0x7A	; 122
    2044:	53 e4       	ldi	r21, 0x43	; 67
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8d 8b       	std	Y+21, r24	; 0x15
    2050:	9e 8b       	std	Y+22, r25	; 0x16
    2052:	af 8b       	std	Y+23, r26	; 0x17
    2054:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <LCD_sendCommand+0x72>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 8b       	std	Y+20, r25	; 0x14
    2074:	8b 8b       	std	Y+19, r24	; 0x13
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2078:	6d 89       	ldd	r22, Y+21	; 0x15
    207a:	7e 89       	ldd	r23, Y+22	; 0x16
    207c:	8f 89       	ldd	r24, Y+23	; 0x17
    207e:	98 8d       	ldd	r25, Y+24	; 0x18
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	69 8d       	ldd	r22, Y+25	; 0x19
    2092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9c 8b       	std	Y+20, r25	; 0x14
    20b6:	8b 8b       	std	Y+19, r24	; 0x13
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_sendCommand+0xd2>
    20ba:	89 e1       	ldi	r24, 0x19	; 25
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9a 8b       	std	Y+18, r25	; 0x12
    20c0:	89 8b       	std	Y+17, r24	; 0x11
    20c2:	89 89       	ldd	r24, Y+17	; 0x11
    20c4:	9a 89       	ldd	r25, Y+18	; 0x12
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_sendCommand+0xc0>
    20ca:	9a 8b       	std	Y+18, r25	; 0x12
    20cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8b 89       	ldd	r24, Y+19	; 0x13
    20d0:	9c 89       	ldd	r25, Y+20	; 0x14
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9c 8b       	std	Y+20, r25	; 0x14
    20d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8b 89       	ldd	r24, Y+19	; 0x13
    20da:	9c 89       	ldd	r25, Y+20	; 0x14
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <LCD_sendCommand+0xb4>
    20e0:	14 c0       	rjmp	.+40     	; 0x210a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	6d 89       	ldd	r22, Y+21	; 0x15
    20e4:	7e 89       	ldd	r23, Y+22	; 0x16
    20e6:	8f 89       	ldd	r24, Y+23	; 0x17
    20e8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9c 8b       	std	Y+20, r25	; 0x14
    20f4:	8b 8b       	std	Y+19, r24	; 0x13
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	98 8b       	std	Y+16, r25	; 0x10
    20fc:	8f 87       	std	Y+15, r24	; 0x0f
    20fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2100:	98 89       	ldd	r25, Y+16	; 0x10
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_sendCommand+0xfc>
    2106:	98 8b       	std	Y+16, r25	; 0x10
    2108:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	62 e0       	ldi	r22, 0x02	; 2
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e8       	ldi	r26, 0x80	; 128
    211a:	bf e3       	ldi	r27, 0x3F	; 63
    211c:	8b 87       	std	Y+11, r24	; 0x0b
    211e:	9c 87       	std	Y+12, r25	; 0x0c
    2120:	ad 87       	std	Y+13, r26	; 0x0d
    2122:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	4a e7       	ldi	r20, 0x7A	; 122
    2132:	53 e4       	ldi	r21, 0x43	; 67
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8f 83       	std	Y+7, r24	; 0x07
    213e:	98 87       	std	Y+8, r25	; 0x08
    2140:	a9 87       	std	Y+9, r26	; 0x09
    2142:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <LCD_sendCommand+0x160>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	4c f5       	brge	.+82     	; 0x21d0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2180:	7c 85       	ldd	r23, Y+12	; 0x0c
    2182:	8d 85       	ldd	r24, Y+13	; 0x0d
    2184:	9e 85       	ldd	r25, Y+14	; 0x0e
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	0f c0       	rjmp	.+30     	; 0x21c6 <LCD_sendCommand+0x1c0>
    21a8:	89 e1       	ldi	r24, 0x19	; 25
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_sendCommand+0x1ae>
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <LCD_sendCommand+0x1a2>
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_sendCommand+0x1ea>
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_sendData(command);
    21f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21fa:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_sendData>
}
    21fe:	6d 96       	adiw	r28, 0x1d	; 29
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	6d 97       	sbiw	r28, 0x1d	; 29
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	a0 e8       	ldi	r26, 0x80	; 128
    2236:	bf e3       	ldi	r27, 0x3F	; 63
    2238:	89 8f       	std	Y+25, r24	; 0x19
    223a:	9a 8f       	std	Y+26, r25	; 0x1a
    223c:	ab 8f       	std	Y+27, r26	; 0x1b
    223e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2240:	69 8d       	ldd	r22, Y+25	; 0x19
    2242:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2244:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2246:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a e7       	ldi	r20, 0x7A	; 122
    224e:	53 e4       	ldi	r21, 0x43	; 67
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8d 8b       	std	Y+21, r24	; 0x15
    225a:	9e 8b       	std	Y+22, r25	; 0x16
    225c:	af 8b       	std	Y+23, r26	; 0x17
    225e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2260:	6d 89       	ldd	r22, Y+21	; 0x15
    2262:	7e 89       	ldd	r23, Y+22	; 0x16
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e8       	ldi	r20, 0x80	; 128
    226e:	5f e3       	ldi	r21, 0x3F	; 63
    2270:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2274:	88 23       	and	r24, r24
    2276:	2c f4       	brge	.+10     	; 0x2282 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9c 8b       	std	Y+20, r25	; 0x14
    227e:	8b 8b       	std	Y+19, r24	; 0x13
    2280:	3f c0       	rjmp	.+126    	; 0x2300 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2282:	6d 89       	ldd	r22, Y+21	; 0x15
    2284:	7e 89       	ldd	r23, Y+22	; 0x16
    2286:	8f 89       	ldd	r24, Y+23	; 0x17
    2288:	98 8d       	ldd	r25, Y+24	; 0x18
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	57 e4       	ldi	r21, 0x47	; 71
    2292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	4c f5       	brge	.+82     	; 0x22ec <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229a:	69 8d       	ldd	r22, Y+25	; 0x19
    229c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    229e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e2       	ldi	r20, 0x20	; 32
    22a8:	51 e4       	ldi	r21, 0x41	; 65
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	9c 8b       	std	Y+20, r25	; 0x14
    22c0:	8b 8b       	std	Y+19, r24	; 0x13
    22c2:	0f c0       	rjmp	.+30     	; 0x22e2 <LCD_displayCharacter+0xd2>
    22c4:	89 e1       	ldi	r24, 0x19	; 25
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9a 8b       	std	Y+18, r25	; 0x12
    22ca:	89 8b       	std	Y+17, r24	; 0x11
    22cc:	89 89       	ldd	r24, Y+17	; 0x11
    22ce:	9a 89       	ldd	r25, Y+18	; 0x12
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_displayCharacter+0xc0>
    22d4:	9a 8b       	std	Y+18, r25	; 0x12
    22d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d8:	8b 89       	ldd	r24, Y+19	; 0x13
    22da:	9c 89       	ldd	r25, Y+20	; 0x14
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	9c 8b       	std	Y+20, r25	; 0x14
    22e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e2:	8b 89       	ldd	r24, Y+19	; 0x13
    22e4:	9c 89       	ldd	r25, Y+20	; 0x14
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	69 f7       	brne	.-38     	; 0x22c4 <LCD_displayCharacter+0xb4>
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ec:	6d 89       	ldd	r22, Y+21	; 0x15
    22ee:	7e 89       	ldd	r23, Y+22	; 0x16
    22f0:	8f 89       	ldd	r24, Y+23	; 0x17
    22f2:	98 8d       	ldd	r25, Y+24	; 0x18
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	98 8b       	std	Y+16, r25	; 0x10
    2306:	8f 87       	std	Y+15, r24	; 0x0f
    2308:	8f 85       	ldd	r24, Y+15	; 0x0f
    230a:	98 89       	ldd	r25, Y+16	; 0x10
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <LCD_displayCharacter+0xfc>
    2310:	98 8b       	std	Y+16, r25	; 0x10
    2312:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2314:	83 e0       	ldi	r24, 0x03	; 3
    2316:	62 e0       	ldi	r22, 0x02	; 2
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e8       	ldi	r26, 0x80	; 128
    2324:	bf e3       	ldi	r27, 0x3F	; 63
    2326:	8b 87       	std	Y+11, r24	; 0x0b
    2328:	9c 87       	std	Y+12, r25	; 0x0c
    232a:	ad 87       	std	Y+13, r26	; 0x0d
    232c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a e7       	ldi	r20, 0x7A	; 122
    233c:	53 e4       	ldi	r21, 0x43	; 67
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8f 83       	std	Y+7, r24	; 0x07
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	a9 87       	std	Y+9, r26	; 0x09
    234c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_displayCharacter+0x1c0>
    23b2:	89 e1       	ldi	r24, 0x19	; 25
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_displayCharacter+0x1ae>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_displayCharacter+0x1a2>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_displayCharacter+0x1ea>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_sendData(data);
    2402:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2404:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_sendData>

}
    2408:	6d 96       	adiw	r28, 0x1d	; 29
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */

void LCD_displayString(const char *Str){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <LCD_displayString+0x6>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	0a c0       	rjmp	.+20     	; 0x243e <LCD_displayString+0x24>
	while(*Str !='\0'){
		LCD_displayCharacter(*Str);
    242a:	e9 81       	ldd	r30, Y+1	; 0x01
    242c:	fa 81       	ldd	r31, Y+2	; 0x02
    242e:	80 81       	ld	r24, Z
    2430:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_displayCharacter>
		Str++;
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */

void LCD_displayString(const char *Str){
	while(*Str !='\0'){
    243e:	e9 81       	ldd	r30, Y+1	; 0x01
    2440:	fa 81       	ldd	r31, Y+2	; 0x02
    2442:	80 81       	ld	r24, Z
    2444:	88 23       	and	r24, r24
    2446:	89 f7       	brne	.-30     	; 0x242a <LCD_displayString+0x10>
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <LCD_moveCursor+0x6>
    2458:	00 d0       	rcall	.+0      	; 0x245a <LCD_moveCursor+0x8>
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	8a 83       	std	Y+2, r24	; 0x02
    2462:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	3d 83       	std	Y+5, r19	; 0x05
    246c:	2c 83       	std	Y+4, r18	; 0x04
    246e:	8c 81       	ldd	r24, Y+4	; 0x04
    2470:	9d 81       	ldd	r25, Y+5	; 0x05
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	91 05       	cpc	r25, r1
    2476:	c1 f0       	breq	.+48     	; 0x24a8 <LCD_moveCursor+0x56>
    2478:	2c 81       	ldd	r18, Y+4	; 0x04
    247a:	3d 81       	ldd	r19, Y+5	; 0x05
    247c:	22 30       	cpi	r18, 0x02	; 2
    247e:	31 05       	cpc	r19, r1
    2480:	2c f4       	brge	.+10     	; 0x248c <LCD_moveCursor+0x3a>
    2482:	8c 81       	ldd	r24, Y+4	; 0x04
    2484:	9d 81       	ldd	r25, Y+5	; 0x05
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	61 f0       	breq	.+24     	; 0x24a2 <LCD_moveCursor+0x50>
    248a:	19 c0       	rjmp	.+50     	; 0x24be <LCD_moveCursor+0x6c>
    248c:	2c 81       	ldd	r18, Y+4	; 0x04
    248e:	3d 81       	ldd	r19, Y+5	; 0x05
    2490:	22 30       	cpi	r18, 0x02	; 2
    2492:	31 05       	cpc	r19, r1
    2494:	69 f0       	breq	.+26     	; 0x24b0 <LCD_moveCursor+0x5e>
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	9d 81       	ldd	r25, Y+5	; 0x05
    249a:	83 30       	cpi	r24, 0x03	; 3
    249c:	91 05       	cpc	r25, r1
    249e:	61 f0       	breq	.+24     	; 0x24b8 <LCD_moveCursor+0x66>
    24a0:	0e c0       	rjmp	.+28     	; 0x24be <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	0b c0       	rjmp	.+22     	; 0x24be <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	80 5c       	subi	r24, 0xC0	; 192
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	07 c0       	rjmp	.+14     	; 0x24be <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	80 5f       	subi	r24, 0xF0	; 240
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	80 5b       	subi	r24, 0xB0	; 176
    24bc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	80 68       	ori	r24, 0x80	; 128
    24c2:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_sendCommand>
}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <LCD_displayStringRowColumn+0x6>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <LCD_displayStringRowColumn+0x8>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	6a 83       	std	Y+2, r22	; 0x02
    24e6:	5c 83       	std	Y+4, r21	; 0x04
    24e8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	6a 81       	ldd	r22, Y+2	; 0x02
    24ee:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
}
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	62 97       	sbiw	r28, 0x12	; 18
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	9a 8b       	std	Y+18, r25	; 0x12
    251e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2520:	89 89       	ldd	r24, Y+17	; 0x11
    2522:	9a 89       	ldd	r25, Y+18	; 0x12
    2524:	9e 01       	movw	r18, r28
    2526:	2f 5f       	subi	r18, 0xFF	; 255
    2528:	3f 4f       	sbci	r19, 0xFF	; 255
    252a:	b9 01       	movw	r22, r18
    252c:	4a e0       	ldi	r20, 0x0A	; 10
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	0e 94 11 15 	call	0x2a22	; 0x2a22 <itoa>
   LCD_displayString(buff); /* Display the string */
    2534:	ce 01       	movw	r24, r28
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
}
    253c:	62 96       	adiw	r28, 0x12	; 18
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_sendCommand>
}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <LCD_sendData>:


static void LCD_sendData(uint8 data){
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	6d 97       	sbiw	r28, 0x1d	; 29
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    257c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <GPIO_writePort>
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	a0 e8       	ldi	r26, 0x80	; 128
    2586:	bf e3       	ldi	r27, 0x3F	; 63
    2588:	89 8f       	std	Y+25, r24	; 0x19
    258a:	9a 8f       	std	Y+26, r25	; 0x1a
    258c:	ab 8f       	std	Y+27, r26	; 0x1b
    258e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	69 8d       	ldd	r22, Y+25	; 0x19
    2592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a e7       	ldi	r20, 0x7A	; 122
    259e:	53 e4       	ldi	r21, 0x43	; 67
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8d 8b       	std	Y+21, r24	; 0x15
    25aa:	9e 8b       	std	Y+22, r25	; 0x16
    25ac:	af 8b       	std	Y+23, r26	; 0x17
    25ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25b0:	6d 89       	ldd	r22, Y+21	; 0x15
    25b2:	7e 89       	ldd	r23, Y+22	; 0x16
    25b4:	8f 89       	ldd	r24, Y+23	; 0x17
    25b6:	98 8d       	ldd	r25, Y+24	; 0x18
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <LCD_sendData+0x70>
		__ticks = 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9c 8b       	std	Y+20, r25	; 0x14
    25ce:	8b 8b       	std	Y+19, r24	; 0x13
    25d0:	3f c0       	rjmp	.+126    	; 0x2650 <LCD_sendData+0xee>
	else if (__tmp > 65535)
    25d2:	6d 89       	ldd	r22, Y+21	; 0x15
    25d4:	7e 89       	ldd	r23, Y+22	; 0x16
    25d6:	8f 89       	ldd	r24, Y+23	; 0x17
    25d8:	98 8d       	ldd	r25, Y+24	; 0x18
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	3f ef       	ldi	r19, 0xFF	; 255
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	57 e4       	ldi	r21, 0x47	; 71
    25e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e6:	18 16       	cp	r1, r24
    25e8:	4c f5       	brge	.+82     	; 0x263c <LCD_sendData+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ea:	69 8d       	ldd	r22, Y+25	; 0x19
    25ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9c 8b       	std	Y+20, r25	; 0x14
    2610:	8b 8b       	std	Y+19, r24	; 0x13
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <LCD_sendData+0xd0>
    2614:	89 e1       	ldi	r24, 0x19	; 25
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9a 8b       	std	Y+18, r25	; 0x12
    261a:	89 8b       	std	Y+17, r24	; 0x11
    261c:	89 89       	ldd	r24, Y+17	; 0x11
    261e:	9a 89       	ldd	r25, Y+18	; 0x12
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <LCD_sendData+0xbe>
    2624:	9a 8b       	std	Y+18, r25	; 0x12
    2626:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2628:	8b 89       	ldd	r24, Y+19	; 0x13
    262a:	9c 89       	ldd	r25, Y+20	; 0x14
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	9c 8b       	std	Y+20, r25	; 0x14
    2630:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2632:	8b 89       	ldd	r24, Y+19	; 0x13
    2634:	9c 89       	ldd	r25, Y+20	; 0x14
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	69 f7       	brne	.-38     	; 0x2614 <LCD_sendData+0xb2>
    263a:	14 c0       	rjmp	.+40     	; 0x2664 <LCD_sendData+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263c:	6d 89       	ldd	r22, Y+21	; 0x15
    263e:	7e 89       	ldd	r23, Y+22	; 0x16
    2640:	8f 89       	ldd	r24, Y+23	; 0x17
    2642:	98 8d       	ldd	r25, Y+24	; 0x18
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
    2650:	8b 89       	ldd	r24, Y+19	; 0x13
    2652:	9c 89       	ldd	r25, Y+20	; 0x14
    2654:	98 8b       	std	Y+16, r25	; 0x10
    2656:	8f 87       	std	Y+15, r24	; 0x0f
    2658:	8f 85       	ldd	r24, Y+15	; 0x0f
    265a:	98 89       	ldd	r25, Y+16	; 0x10
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_sendData+0xfa>
    2660:	98 8b       	std	Y+16, r25	; 0x10
    2662:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	62 e0       	ldi	r22, 0x02	; 2
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a0 e8       	ldi	r26, 0x80	; 128
    2674:	bf e3       	ldi	r27, 0x3F	; 63
    2676:	8b 87       	std	Y+11, r24	; 0x0b
    2678:	9c 87       	std	Y+12, r25	; 0x0c
    267a:	ad 87       	std	Y+13, r26	; 0x0d
    267c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2680:	7c 85       	ldd	r23, Y+12	; 0x0c
    2682:	8d 85       	ldd	r24, Y+13	; 0x0d
    2684:	9e 85       	ldd	r25, Y+14	; 0x0e
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a e7       	ldi	r20, 0x7A	; 122
    268c:	53 e4       	ldi	r21, 0x43	; 67
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8f 83       	std	Y+7, r24	; 0x07
    2698:	98 87       	std	Y+8, r25	; 0x08
    269a:	a9 87       	std	Y+9, r26	; 0x09
    269c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <LCD_sendData+0x15e>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	3f c0       	rjmp	.+126    	; 0x273e <LCD_sendData+0x1dc>
	else if (__tmp > 65535)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <LCD_sendData+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26da:	7c 85       	ldd	r23, Y+12	; 0x0c
    26dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26de:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <LCD_sendData+0x1be>
    2702:	89 e1       	ldi	r24, 0x19	; 25
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCD_sendData+0x1ac>
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <LCD_sendData+0x1a0>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <LCD_sendData+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <LCD_sendData+0x1e8>
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2752:	6d 96       	adiw	r28, 0x1d	; 29
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <EEPROM_writeByte>:

#include "external_eeprom.h"
#include "../../MCAL/TWI/TWI.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <EEPROM_writeByte+0x6>
    276a:	00 d0       	rcall	.+0      	; 0x276c <EEPROM_writeByte+0x8>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2776:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    277a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    277e:	88 30       	cpi	r24, 0x08	; 8
    2780:	11 f0       	breq	.+4      	; 0x2786 <EEPROM_writeByte+0x22>
        return ERROR;
    2782:	1c 82       	std	Y+4, r1	; 0x04
    2784:	28 c0       	rjmp	.+80     	; 0x27d6 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	80 70       	andi	r24, 0x00	; 0
    278c:	97 70       	andi	r25, 0x07	; 7
    278e:	88 0f       	add	r24, r24
    2790:	89 2f       	mov	r24, r25
    2792:	88 1f       	adc	r24, r24
    2794:	99 0b       	sbc	r25, r25
    2796:	91 95       	neg	r25
    2798:	80 6a       	ori	r24, 0xA0	; 160
    279a:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    279e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    27a2:	88 31       	cpi	r24, 0x18	; 24
    27a4:	11 f0       	breq	.+4      	; 0x27aa <EEPROM_writeByte+0x46>
        return ERROR;
    27a6:	1c 82       	std	Y+4, r1	; 0x04
    27a8:	16 c0       	rjmp	.+44     	; 0x27d6 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    27b0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    27b4:	88 32       	cpi	r24, 0x28	; 40
    27b6:	11 f0       	breq	.+4      	; 0x27bc <EEPROM_writeByte+0x58>
        return ERROR;
    27b8:	1c 82       	std	Y+4, r1	; 0x04
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    27c2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    27c6:	88 32       	cpi	r24, 0x28	; 40
    27c8:	11 f0       	breq	.+4      	; 0x27ce <EEPROM_writeByte+0x6a>
        return ERROR;
    27ca:	1c 82       	std	Y+4, r1	; 0x04
    27cc:	04 c0       	rjmp	.+8      	; 0x27d6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    27ce:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TWI_stop>

    return SUCCESS;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	8c 83       	std	Y+4, r24	; 0x04
    27d6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <EEPROM_readByte+0x6>
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <EEPROM_readByte+0x8>
    27ee:	0f 92       	push	r0
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	7c 83       	std	Y+4, r23	; 0x04
    27fa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    27fc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2800:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    2804:	88 30       	cpi	r24, 0x08	; 8
    2806:	11 f0       	breq	.+4      	; 0x280c <EEPROM_readByte+0x26>
        return ERROR;
    2808:	1d 82       	std	Y+5, r1	; 0x05
    280a:	44 c0       	rjmp	.+136    	; 0x2894 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	80 70       	andi	r24, 0x00	; 0
    2812:	97 70       	andi	r25, 0x07	; 7
    2814:	88 0f       	add	r24, r24
    2816:	89 2f       	mov	r24, r25
    2818:	88 1f       	adc	r24, r24
    281a:	99 0b       	sbc	r25, r25
    281c:	91 95       	neg	r25
    281e:	80 6a       	ori	r24, 0xA0	; 160
    2820:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2824:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    2828:	88 31       	cpi	r24, 0x18	; 24
    282a:	11 f0       	breq	.+4      	; 0x2830 <EEPROM_readByte+0x4a>
        return ERROR;
    282c:	1d 82       	std	Y+5, r1	; 0x05
    282e:	32 c0       	rjmp	.+100    	; 0x2894 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2836:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    283a:	88 32       	cpi	r24, 0x28	; 40
    283c:	11 f0       	breq	.+4      	; 0x2842 <EEPROM_readByte+0x5c>
        return ERROR;
    283e:	1d 82       	std	Y+5, r1	; 0x05
    2840:	29 c0       	rjmp	.+82     	; 0x2894 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    2842:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2846:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    284a:	80 31       	cpi	r24, 0x10	; 16
    284c:	11 f0       	breq	.+4      	; 0x2852 <EEPROM_readByte+0x6c>
        return ERROR;
    284e:	1d 82       	std	Y+5, r1	; 0x05
    2850:	21 c0       	rjmp	.+66     	; 0x2894 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	9a 81       	ldd	r25, Y+2	; 0x02
    2856:	80 70       	andi	r24, 0x00	; 0
    2858:	97 70       	andi	r25, 0x07	; 7
    285a:	88 0f       	add	r24, r24
    285c:	89 2f       	mov	r24, r25
    285e:	88 1f       	adc	r24, r24
    2860:	99 0b       	sbc	r25, r25
    2862:	91 95       	neg	r25
    2864:	81 6a       	ori	r24, 0xA1	; 161
    2866:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    286a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    286e:	80 34       	cpi	r24, 0x40	; 64
    2870:	11 f0       	breq	.+4      	; 0x2876 <EEPROM_readByte+0x90>
        return ERROR;
    2872:	1d 82       	std	Y+5, r1	; 0x05
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2876:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <TWI_readByteWithNACK>
    287a:	eb 81       	ldd	r30, Y+3	; 0x03
    287c:	fc 81       	ldd	r31, Y+4	; 0x04
    287e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2880:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TWI_getStatus>
    2884:	88 35       	cpi	r24, 0x58	; 88
    2886:	11 f0       	breq	.+4      	; 0x288c <EEPROM_readByte+0xa6>
        return ERROR;
    2888:	1d 82       	std	Y+5, r1	; 0x05
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    288c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TWI_stop>

    return SUCCESS;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <DcMotor_Init>:
 * 				setup the direction for the two
 * 				motor pins through the GPIO driver.
 * 			=> 	Stop at the DC-Motor at the beginning
 * 				through the GPIO driver.
 * */
void DcMotor_Init(void) {
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_RIGHT_PORT_ID, MOTOR_RIGHT_PIN_ID, PIN_OUTPUT);
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	41 e0       	ldi	r20, 0x01	; 1
    28b4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_LEFT_PORT_ID, MOTOR_LEFT_PIN_ID, PIN_OUTPUT);
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>
}
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <DcMotor_Rotate>:
 * 				DC Motor CW/ or A-CW or stop the motor based
 * 				on the state input state value.
 * 			=> 	Send the required duty cycle to the PWM driver
 * 				based on the required speed value.
 * */
void DcMotor_Rotate(DCMotor_State state, uint8 speed) {
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <DcMotor_Rotate+0x6>
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <DcMotor_Rotate+0x8>
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	6a 83       	std	Y+2, r22	; 0x02
	if (OFF == state)
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	82 30       	cpi	r24, 0x02	; 2
    28dc:	21 f4       	brne	.+8      	; 0x28e6 <DcMotor_Rotate+0x1e>
		PWM_Timer0_Start(0);
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	0e 94 83 0a 	call	0x1506	; 0x1506 <PWM_Timer0_Start>
    28e4:	27 c0       	rjmp	.+78     	; 0x2934 <DcMotor_Rotate+0x6c>
	else {
		switch (state) {
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	3c 83       	std	Y+4, r19	; 0x04
    28ee:	2b 83       	std	Y+3, r18	; 0x03
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	9c 81       	ldd	r25, Y+4	; 0x04
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	31 f0       	breq	.+12     	; 0x2904 <DcMotor_Rotate+0x3c>
    28f8:	2b 81       	ldd	r18, Y+3	; 0x03
    28fa:	3c 81       	ldd	r19, Y+4	; 0x04
    28fc:	21 30       	cpi	r18, 0x01	; 1
    28fe:	31 05       	cpc	r19, r1
    2900:	61 f0       	breq	.+24     	; 0x291a <DcMotor_Rotate+0x52>
    2902:	15 c0       	rjmp	.+42     	; 0x292e <DcMotor_Rotate+0x66>
		case CW:
			GPIO_writePin(MOTOR_RIGHT_PORT_ID, MOTOR_RIGHT_PIN_ID, LOGIC_HIGH);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	60 e0       	ldi	r22, 0x00	; 0
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
			GPIO_writePin(MOTOR_LEFT_PORT_ID, MOTOR_LEFT_PIN_ID, LOGIC_LOW);
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	61 e0       	ldi	r22, 0x01	; 1
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
    2918:	0a c0       	rjmp	.+20     	; 0x292e <DcMotor_Rotate+0x66>
			break;
		case ACW:
			GPIO_writePin(MOTOR_RIGHT_PORT_ID, MOTOR_RIGHT_PIN_ID, LOGIC_LOW);
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	40 e0       	ldi	r20, 0x00	; 0
    2920:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
			GPIO_writePin(MOTOR_LEFT_PORT_ID, MOTOR_LEFT_PIN_ID, LOGIC_HIGH);
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	61 e0       	ldi	r22, 0x01	; 1
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
			break;
		default:
			break;
		}
		PWM_Timer0_Start(speed);
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	0e 94 83 0a 	call	0x1506	; 0x1506 <PWM_Timer0_Start>
	}
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <Application_Setup>:
#include "Application.h"


void Application_Setup() {
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62

}
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <Application_Loop>:

void Application_Loop() {
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
}
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <main>:
 *  Created on: Oct 27, 2023
 *      Author: adham
 */
#include "Application/Application.h"

int main(void){
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
	/*Initialization of the application*/
	Application_Setup();
    2966:	0e 94 a1 14 	call	0x2942	; 0x2942 <Application_Setup>
	while(1){
		/*The Main loop of the application*/
		Application_Loop();
    296a:	0e 94 a8 14 	call	0x2950	; 0x2950 <Application_Loop>
    296e:	fd cf       	rjmp	.-6      	; 0x296a <main+0xc>

00002970 <__udivmodsi4>:
    2970:	a1 e2       	ldi	r26, 0x21	; 33
    2972:	1a 2e       	mov	r1, r26
    2974:	aa 1b       	sub	r26, r26
    2976:	bb 1b       	sub	r27, r27
    2978:	fd 01       	movw	r30, r26
    297a:	0d c0       	rjmp	.+26     	; 0x2996 <__udivmodsi4_ep>

0000297c <__udivmodsi4_loop>:
    297c:	aa 1f       	adc	r26, r26
    297e:	bb 1f       	adc	r27, r27
    2980:	ee 1f       	adc	r30, r30
    2982:	ff 1f       	adc	r31, r31
    2984:	a2 17       	cp	r26, r18
    2986:	b3 07       	cpc	r27, r19
    2988:	e4 07       	cpc	r30, r20
    298a:	f5 07       	cpc	r31, r21
    298c:	20 f0       	brcs	.+8      	; 0x2996 <__udivmodsi4_ep>
    298e:	a2 1b       	sub	r26, r18
    2990:	b3 0b       	sbc	r27, r19
    2992:	e4 0b       	sbc	r30, r20
    2994:	f5 0b       	sbc	r31, r21

00002996 <__udivmodsi4_ep>:
    2996:	66 1f       	adc	r22, r22
    2998:	77 1f       	adc	r23, r23
    299a:	88 1f       	adc	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	1a 94       	dec	r1
    29a0:	69 f7       	brne	.-38     	; 0x297c <__udivmodsi4_loop>
    29a2:	60 95       	com	r22
    29a4:	70 95       	com	r23
    29a6:	80 95       	com	r24
    29a8:	90 95       	com	r25
    29aa:	9b 01       	movw	r18, r22
    29ac:	ac 01       	movw	r20, r24
    29ae:	bd 01       	movw	r22, r26
    29b0:	cf 01       	movw	r24, r30
    29b2:	08 95       	ret

000029b4 <__prologue_saves__>:
    29b4:	2f 92       	push	r2
    29b6:	3f 92       	push	r3
    29b8:	4f 92       	push	r4
    29ba:	5f 92       	push	r5
    29bc:	6f 92       	push	r6
    29be:	7f 92       	push	r7
    29c0:	8f 92       	push	r8
    29c2:	9f 92       	push	r9
    29c4:	af 92       	push	r10
    29c6:	bf 92       	push	r11
    29c8:	cf 92       	push	r12
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	ca 1b       	sub	r28, r26
    29de:	db 0b       	sbc	r29, r27
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	09 94       	ijmp

000029ec <__epilogue_restores__>:
    29ec:	2a 88       	ldd	r2, Y+18	; 0x12
    29ee:	39 88       	ldd	r3, Y+17	; 0x11
    29f0:	48 88       	ldd	r4, Y+16	; 0x10
    29f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    29fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2a00:	c8 84       	ldd	r12, Y+8	; 0x08
    2a02:	df 80       	ldd	r13, Y+7	; 0x07
    2a04:	ee 80       	ldd	r14, Y+6	; 0x06
    2a06:	fd 80       	ldd	r15, Y+5	; 0x05
    2a08:	0c 81       	ldd	r16, Y+4	; 0x04
    2a0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a10:	ce 0f       	add	r28, r30
    2a12:	d1 1d       	adc	r29, r1
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	ed 01       	movw	r28, r26
    2a20:	08 95       	ret

00002a22 <itoa>:
    2a22:	fb 01       	movw	r30, r22
    2a24:	9f 01       	movw	r18, r30
    2a26:	e8 94       	clt
    2a28:	42 30       	cpi	r20, 0x02	; 2
    2a2a:	c4 f0       	brlt	.+48     	; 0x2a5c <itoa+0x3a>
    2a2c:	45 32       	cpi	r20, 0x25	; 37
    2a2e:	b4 f4       	brge	.+44     	; 0x2a5c <itoa+0x3a>
    2a30:	4a 30       	cpi	r20, 0x0A	; 10
    2a32:	29 f4       	brne	.+10     	; 0x2a3e <itoa+0x1c>
    2a34:	97 fb       	bst	r25, 7
    2a36:	1e f4       	brtc	.+6      	; 0x2a3e <itoa+0x1c>
    2a38:	90 95       	com	r25
    2a3a:	81 95       	neg	r24
    2a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3e:	64 2f       	mov	r22, r20
    2a40:	77 27       	eor	r23, r23
    2a42:	0e 94 42 15 	call	0x2a84	; 0x2a84 <__udivmodhi4>
    2a46:	80 5d       	subi	r24, 0xD0	; 208
    2a48:	8a 33       	cpi	r24, 0x3A	; 58
    2a4a:	0c f0       	brlt	.+2      	; 0x2a4e <itoa+0x2c>
    2a4c:	89 5d       	subi	r24, 0xD9	; 217
    2a4e:	81 93       	st	Z+, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	a1 f7       	brne	.-24     	; 0x2a3e <itoa+0x1c>
    2a56:	16 f4       	brtc	.+4      	; 0x2a5c <itoa+0x3a>
    2a58:	5d e2       	ldi	r21, 0x2D	; 45
    2a5a:	51 93       	st	Z+, r21
    2a5c:	10 82       	st	Z, r1
    2a5e:	c9 01       	movw	r24, r18
    2a60:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <strrev>

00002a64 <strrev>:
    2a64:	dc 01       	movw	r26, r24
    2a66:	fc 01       	movw	r30, r24
    2a68:	67 2f       	mov	r22, r23
    2a6a:	71 91       	ld	r23, Z+
    2a6c:	77 23       	and	r23, r23
    2a6e:	e1 f7       	brne	.-8      	; 0x2a68 <strrev+0x4>
    2a70:	32 97       	sbiw	r30, 0x02	; 2
    2a72:	04 c0       	rjmp	.+8      	; 0x2a7c <strrev+0x18>
    2a74:	7c 91       	ld	r23, X
    2a76:	6d 93       	st	X+, r22
    2a78:	70 83       	st	Z, r23
    2a7a:	62 91       	ld	r22, -Z
    2a7c:	ae 17       	cp	r26, r30
    2a7e:	bf 07       	cpc	r27, r31
    2a80:	c8 f3       	brcs	.-14     	; 0x2a74 <strrev+0x10>
    2a82:	08 95       	ret

00002a84 <__udivmodhi4>:
    2a84:	aa 1b       	sub	r26, r26
    2a86:	bb 1b       	sub	r27, r27
    2a88:	51 e1       	ldi	r21, 0x11	; 17
    2a8a:	07 c0       	rjmp	.+14     	; 0x2a9a <__udivmodhi4_ep>

00002a8c <__udivmodhi4_loop>:
    2a8c:	aa 1f       	adc	r26, r26
    2a8e:	bb 1f       	adc	r27, r27
    2a90:	a6 17       	cp	r26, r22
    2a92:	b7 07       	cpc	r27, r23
    2a94:	10 f0       	brcs	.+4      	; 0x2a9a <__udivmodhi4_ep>
    2a96:	a6 1b       	sub	r26, r22
    2a98:	b7 0b       	sbc	r27, r23

00002a9a <__udivmodhi4_ep>:
    2a9a:	88 1f       	adc	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	5a 95       	dec	r21
    2aa0:	a9 f7       	brne	.-22     	; 0x2a8c <__udivmodhi4_loop>
    2aa2:	80 95       	com	r24
    2aa4:	90 95       	com	r25
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	08 95       	ret

00002aac <_exit>:
    2aac:	f8 94       	cli

00002aae <__stop_program>:
    2aae:	ff cf       	rjmp	.-2      	; 0x2aae <__stop_program>
